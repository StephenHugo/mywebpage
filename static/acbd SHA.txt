function [v,thr] = acbd(in)
% This code is distributed under the following licence:
% http://creativecommons.org/licenses/by-nc-sa/3.0/
% 
% It was written by Stephen Hugo Arce for the following publication:
% http://www.nature.com/srep/2013/130724/srep02266/full/srep02266.html
% Please contact him with any questions at stephenhugo@gmail.com
% 
% the argument 'in' should be a single channel, grayscale image of 
% a fluorescence signal, originally designed for cells and nuclei. Very 
% noisy images should be pre-processed, even if by a Gaussian blur:
%
% siz = 3;
% in = conv2(in,...
%      fspecial('gaussian',siz,siz/6).*...
%      fspecial('disk',(siz-1)/2)), 'valid');
%
% The structured variable, v, will contain several intemediate values, but
% for segmentation, the following scheme was used:
%
% [v,thr] = acbd(double(imread('image name here')));
% segmentation = v.v>thr;
%
% It is further suggested to remove extra noise as follows:
% segmentation = bwareaopen(segmentation,50,4);
% The automatic calculation of the spatial filter size might not always 
% be the best choice, but it performs adequately for many images we have
% tested.

% This function uses a Gaussian mixture model to estimate the best
% parameters for the image histogram of 'in' using 
% the expectation-maximization algorithm. The structure, v, stores the mean
% and standard deviation for each gaussian distribution.
v.m = expmax(in);

% A simple threshold is calculated for convenience.
thr = v.m(1)+2*v.m(3);

% This code estimates the size of single objects in the image to
% determine the size of the spatial filter. If there are multiple objects
% in your images, either crop them to surround single objects or assign a
% filter size manually.
bw  = bwareaopen(in>thr,50,4);
rp =regionprops(bw,'Area');
area = [rp.Area];
ind = area==max(area);
r   = max( ceil( sqrt( area(ind)/pi )/3 ), 3);
% r=15; Uncomment for manual assignment of filter size

% This makes an odd-valued filter size and might not be necesary.
if mod(r,2)
    v.r=[r 2*r-1 3*r];
else
    v.r=[r-1 2*r-1 3*r-3];
end

% create a Gaussian filter with the edges removed by a disk.
v.gk    = fspecial('gaussian',v.r(3),v.r(1)/2).*dsc(v.r(3));

% convolve the input image and adjust the result for vignetting at the
% image edges, caused by the filter overlapping the image boundaries.
v.g     =  conv2( in, v.gk, 'same')...
         ./conv2( ones(size(in)), v.gk, 'same')...
         - v.m(1); % remove the mean background value
     
in      = in - v.m(1); % remove the mean background value

% the index of the maximum negative difference between the input and convoled image
% is sought.
dex     = find(in-v.g==min(in(:)-v.g(:)));

% At the first index returned, a scale for the convolution result is
% calculated.
v.scl   = in(dex(1))...
        ./v.g(dex(1));
    
% Finally, the scaled convolution result is subtracted from the original 
% image and the background intensity value is restored.
v.v     = in - v.scl * v.g + v.m(1);

% A nested function for creating disk masks.
function res=dsc(os)
    dif=(v.r(3)-os)/2;
    kern=[zeros(1,dif) 1 zeros(1,dif)];
    res=conv2(fspecial('disk',(os-1)/2),kern'*kern);
    res=res/max(res(:));
end
end

function [stats,z] = expmax(in)

in = double(in);
% this is the expectation maximization algorithm for 2 gaussians
% sort data for smooth graphs
[x,ind]         = sort(in(:));
[~,ind]   = sort(ind);

% initial guesses
u1      = min(x);
u2      = max(x);
sig1    = std(x);
sig2    = std(x);
pih     = 0.5;
limit   = 1;

while limit>0.0001
    
% get responsibilities
gammai  = pih*dens(x,u2,sig2)./...
    ((1-pih)*dens(x,u1,sig1)+pih*dens(x,u2,sig2));

% maximization step: weighted means/variances
u1      = sum((1-gammai).*x)/sum(1-gammai);
u2      = sum(gammai.*x)/sum(gammai);
sig1    = sqrt( sum((1-gammai).*(x-u1).^2)/sum(1-gammai));
sig2    = sqrt( sum(gammai.*(x-u2).^2)/sum(gammai));

% convergence condition
pihtemp = sum(gammai)/numel(gammai);
limit   = abs(pih-pihtemp);
pih     = pihtemp;

% d1      = dens(x,u1,sig1);
% d2      = dens(x,u2,sig2);
% normalize density for display
% you can comment the next 3 lines to make it run faster
% plot(x,d1/max(d1),x,d2/max(d2))
% hold on,plot(x,gammai,'black:'),hold off
% pause(0.2)
end

stats     = [u1,sig1;u2,sig2];
z=zeros(size(in));
z(:)  = gammai(ind);

end

function out = dens(y,u,sig)
% gaussian density function
out = exp( -(y - u).^2/(2*sig^2) ) /(sqrt(2*pi)*sig);

end